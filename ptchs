<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Engagements View</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      background-color: #f4f4f9;
    }

    .container {
      width: 90%;
      margin: auto;
      overflow: hidden;
    }

    h1 {
      text-align: center;
      color: #333;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }

    th, td {
      padding: 12px;
      text-align: left;
      border: 1px solid #ddd;
    }

    th {
      background-color: #4CAF50;
      color: white;
    }

    td {
      background-color: #f9f9f9;
    }

    .actions button {
      margin: 0 5px;
      padding: 5px 10px;
      cursor: pointer;
      font-size: 14px;
      border: none;
      border-radius: 5px;
      transition: background-color 0.3s;
    }

    .actions .edit {
      background-color: #4CAF50;
      color: white;
    }

    .actions .edit:hover {
      background-color: #45a049;
    }

    .actions .close {
      background-color: #f44336;
      color: white;
    }

    .actions .close:hover {
      background-color: #e53935;
    }

    .refresh-btn {
      margin: 20px 0;
      padding: 10px 20px;
      background-color: #008CBA;
      color: white;
      font-size: 16px;
      cursor: pointer;
      border-radius: 5px;
    }

    .refresh-btn:hover {
      background-color: #007bb5;
    }

    .error {
      color: red;
      text-align: center;
    }
  </style>
</head>
<body>

  <div class="container">
    <h1>Engagements View</h1>
    <button class="refresh-btn" onclick="fetchData()">Refresh</button>
    <div id="errorMessage" class="error"></div>
    <table id="engagementsTable">
      <thead>
        <tr>
          <th>Jira ID</th>
          <th>Issue Type</th>
          <th>Added On</th>
          <th>Comments</th>
          <th>Assigned To</th>
          <th>Status</th>
          <th>Assigned On</th>
          <th>Version</th>
          <th>Reviewed On</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <!-- Dynamic Data Rows will be inserted here -->
      </tbody>
    </table>
  </div>

  <script>
    // Global variable to store user data
    let usersData = {};

    // Fetch Engagements Data from API
    async function fetchData() {
      try {
        // Fetch engagements
        const engagementsResponse = await fetch('https://dojo.crm.com/api/v2/engagements');
        if (!engagementsResponse.ok) {
          throw new Error('Failed to fetch engagements');
        }
        const engagementsData = await engagementsResponse.json();

        // Fetch users data to map lead IDs to usernames
        const usersResponse = await fetch('https://dojo.crm.com/api/v2/users');
        if (!usersResponse.ok) {
          throw new Error('Failed to fetch users');
        }
        const usersDataResponse = await usersResponse.json();
        usersData = usersDataResponse.reduce((acc, user) => {
          acc[user.id] = user.username;
          return acc;
        }, {});

        // Clear any previous error message
        document.getElementById('errorMessage').textContent = '';

        // Update the table with the fetched data
        updateTable(engagementsData);
      } catch (error) {
        console.error('Error fetching data:', error);
        document.getElementById('errorMessage').textContent = 'Error fetching data. Please try again later.';
      }
    }

    // Update the table with the fetched engagements data
    function updateTable(data) {
      const tableBody = document.querySelector('#engagementsTable tbody');
      tableBody.innerHTML = '';

      if (!data || data.length === 0) {
        const row = document.createElement('tr');
        row.innerHTML = '<td colspan="10">No data available</td>';
        tableBody.appendChild(row);
        return;
      }

      data.forEach(engagement => {
        const row = document.createElement('tr');

        // Format date for "Added On" and "Reviewed On"
        const addedOn = new Date(engagement.created).toLocaleDateString();
        let reviewedOn = engagement.status === 'Completed' ? new Date().toLocaleDateString() : '';

        // Get lead username from users data
        const assignedTo = usersData[engagement.lead] || 'N/A';

        row.innerHTML = `
          <td>${engagement.name}</td>
          <td>${engagement.reason}</td>
          <td>${addedOn}</td>
          <td>${engagement.description}</td>
          <td>${assignedTo}</td>
          <td>${engagement.status}</td>
          <td>${new Date(engagement.target_start).toLocaleDateString()}</td>
          <td>${engagement.version}</td>
          <td>${reviewedOn}</td>
          <td class="actions">
            <button class="edit" onclick="openEdit(${engagement.id})">Edit</button>
            <button class="close" onclick="openClose(${engagement.id})">Close</button>
          </td>
        `;

        tableBody.appendChild(row);
      });
    }

    // Open the edit URL in a new tab
    function openEdit(id) {
      window.open(`https://dojo.crm.com/engagement/${id}/edit`, '_blank');
    }

    // Open the close URL in a new tab
    function openClose(id) {
      window.open(`https://dojo.crm.com/engagement/${id}/close`, '_blank');
    }

    // Initial fetch of data
    fetchData();
  </script>

</body>
</html>