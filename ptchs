<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Engagements Table</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: #f4f4f4;
            margin: 20px;
            padding: 20px;
            text-align: center;
        }

        h2 {
            color: #333;
        }

        .controls {
            margin-bottom: 10px;
        }

        input[type="text"] {
            padding: 8px;
            width: 200px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        button {
            background-color: #007BFF;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            font-size: 16px;
            border-radius: 5px;
        }

        button:hover {
            background-color: #0056b3;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
            margin: auto;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
            word-wrap: break-word;
            max-width: 150px;
        }

        th {
            background-color: #007BFF;
            color: white;
        }

        td button {
            padding: 5px 10px;
            margin: 2px;
            border: none;
            cursor: pointer;
            border-radius: 3px;
        }

        .edit-btn {
            background-color: #28a745;
            color: white;
        }

        .close-btn {
            background-color: #dc3545;
            color: white;
        }

        .edit-btn:hover {
            background-color: #218838;
        }

        .close-btn:hover {
            background-color: #c82333;
        }

        .pagination {
            margin: 10px 0;
        }

        .pagination button {
            margin: 2px;
            padding: 5px 10px;
            font-size: 14px;
        }

        .hidden {
            display: none;
        }
    </style>
</head>
<body>

    <h2>Engagements Data</h2>

    <div class="controls">
        <input type="text" id="searchBox" placeholder="Search...">
        <button id="refreshBtn">Refresh</button>
    </div>

    <table id="engagementTable">
        <thead>
            <tr>
                <th>Jira ID</th>
                <th>Issue Type</th>
                <th>Added On</th>
                <th>Comments</th>
                <th>Assigned To</th>
                <th>Status</th>
                <th>Assigned On</th>
                <th>Version</th>
                <th>Reviewed On</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- Data will be inserted here -->
        </tbody>
    </table>

    <div class="pagination">
        <button id="prevPage">Previous</button>
        <span id="pageInfo"></span>
        <button id="nextPage">Next</button>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            fetchEngagements();

            document.getElementById("refreshBtn").addEventListener("click", fetchEngagements);
            document.getElementById("searchBox").addEventListener("input", filterTable);
            document.getElementById("prevPage").addEventListener("click", () => changePage(-1));
            document.getElementById("nextPage").addEventListener("click", () => changePage(1));
        });

        let currentPage = 1;
        const rowsPerPage = 10;
        let tableData = [];

        async function fetchEngagements() {
            try {
                const response = await fetch("https://dojo.crm.com/api/v2/engagements");
                const data = await response.json();
                tableData = data;
                populateTable();
            } catch (error) {
                console.error("Error fetching data:", error);
            }
        }

        async function getUserById(userId) {
            try {
                const response = await fetch(`https://dojo.crm.com/api/v2/users/${userId}`);
                const userData = await response.json();
                return userData.name.replace(/@.*/, "");
            } catch {
                return "Unknown";
            }
        }

        async function populateTable() {
            const tableBody = document.querySelector("#engagementTable tbody");
            tableBody.innerHTML = "";

            let startIndex = (currentPage - 1) * rowsPerPage;
            let endIndex = startIndex + rowsPerPage;
            let paginatedData = tableData.slice(startIndex, endIndex);

            for (const item of paginatedData) {
                const row = document.createElement("tr");

                const assignedTo = await getUserById(item.lead);
                const reviewedOn = item.status === "Completed" ? new Date().toISOString().split("T")[0] : "-";

                row.innerHTML = `
                    <td>${item.name || "-"}</td>
                    <td>${item.reason || "-"}</td>
                    <td>${item.created ? formatDate(item.created) : "-"}</td>
                    <td>${item.description || "-"}</td>
                    <td>${assignedTo}</td>
                    <td>${item.status || "-"}</td>
                    <td>${item.target_start ? formatDate(item.target_start) : "-"}</td>
                    <td>${item.version || "-"}</td>
                    <td>${reviewedOn}</td>
                    <td>
                        <button class="edit-btn" onclick="openEditPage(${item.id})">Edit</button>
                        <button class="close-btn" onclick="openClosePage(${item.id})">Close</button>
                    </td>
                `;

                tableBody.appendChild(row);
            }

            updatePagination();
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toISOString().split("T")[0];
        }

        function openEditPage(id) {
            window.open(`https://dojo.crm.com/engagement/${id}/edit`, "_blank");
        }

        function openClosePage(id) {
            window.open(`https://dojo.crm.com/engagement/${id}/close`, "_blank");
        }

        function filterTable() {
            const searchQuery = document.getElementById("searchBox").value.toLowerCase();
            tableData = tableData.filter(item =>
                Object.values(item).some(val => val && val.toString().toLowerCase().includes(searchQuery))
            );
            currentPage = 1;
            populateTable();
        }

        function updatePagination() {
            document.getElementById("pageInfo").innerText = `Page ${currentPage} of ${Math.ceil(tableData.length / rowsPerPage)}`;
            document.getElementById("prevPage").disabled = currentPage === 1;
            document.getElementById("nextPage").disabled = currentPage >= Math.ceil(tableData.length / rowsPerPage);
        }

        function changePage(step) {
            currentPage += step;
            populateTable();
        }
    </script>

</body>
</html>