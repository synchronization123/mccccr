import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Alignment
from datetime import datetime

# File paths
project_file = "project.xlsx"
output_file = "output.xlsx"

# Load project.xlsx with multiple sheets
sheets = pd.read_excel(project_file, sheet_name=None)

# Load output.xlsx (contains Applications, JAR count, JS count)
df_output = pd.read_excel(output_file)

# Convert Application names to string for consistency
df_output["Applications"] = df_output["Applications"].astype(str)

# Get current date in format "03-Feb-25"
current_date = datetime.now().strftime("%d-%b-%y")  # Example: 03-Feb-25

# Function to update each sheet
def update_sheet(sheet_name, df_project):
    # Merge project data with output.xlsx using VLOOKUP-like behavior
    df_project = df_project.merge(df_output, how="left", left_on="Project name", right_on="Applications")

    # Fill NaN values with 0 for missing counts
    df_project["JAR count"].fillna(0, inplace=True)
    df_project["JS count"].fillna(0, inplace=True)

    # Convert to integer format
    df_project["JAR count"] = df_project["JAR count"].astype(int)
    df_project["JS count"] = df_project["JS count"].astype(int)

    # Rename JAR count and JS count to match project.xlsx headers
    df_project.rename(columns={"JAR count": "Jar", "JS count": "Js"}, inplace=True)

    # Drop unnecessary "Applications" column
    df_project.drop(columns=["Applications"], inplace=True)

    return df_project

# Process both sheets separately
updated_sheets = {
    "Daily_Monitoring_Apps": update_sheet("Daily_Monitoring_Apps", sheets["Daily_Monitoring_Apps"]),
    "Non-Daily_Monitoring_Apps": update_sheet("Non-Daily_Monitoring_Apps", sheets["Non-Daily_Monitoring_Apps"])
}

# Save the updated project.xlsx
with pd.ExcelWriter(project_file, engine="openpyxl") as writer:
    for sheet_name, df in updated_sheets.items():
        df.to_excel(writer, sheet_name=sheet_name, index=False)

# Load the Excel file again with openpyxl for merging cells
wb = load_workbook(project_file)

for sheet_name in updated_sheets.keys():
    ws = wb[sheet_name]

    # Find column indexes for "Jar" and "Js"
    headers = [cell.value for cell in ws[1]]  # Read first row (headers)
    jar_col = headers.index("Jar") + 1  # Convert to 1-based index
    js_col = headers.index("Js") + 1  # Convert to 1-based index

    # Insert a new row below headers
    ws.insert_rows(2)

    # Merge "Jar" and "Js" columns in row 2
    ws.merge_cells(start_row=2, start_column=jar_col, end_row=2, end_column=js_col)
    merged_cell = ws.cell(row=2, column=jar_col)
    merged_cell.value = current_date
    merged_cell.alignment = Alignment(horizontal="center", vertical="center")

# Save final project.xlsx with merged date row
wb.save(project_file)

print(f"Successfully updated {project_file} with JAR and JS counts, and merged the date row below headers in format {current_date}.")