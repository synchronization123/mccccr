import os
import pandas as pd
from openpyxl import load_workbook
from tkinter import filedialog, messagebox, Tk, Label, Entry, Button, ttk
from tkcalendar import DateEntry

# Function to process data
def process_data():
    patch_id = entry_patch_id.get().strip()
    build_name = entry_build_name.get().strip()
    total_time = entry_total_time.get().strip()
    report_date = date_picker.get_date().strftime("%Y-%m-%d")
    auth_value = auth_combobox.get().strip()
    authz_value = authz_combobox.get().strip()
    file_path = entry_csv.get().strip()
    
    template_path = "C://user//template//report.xlsx"
    output_csv_path = "C://user/patch/output.csv"
    output_xlsx_path = f"C://user/patch/{build_name}.xlsx"

    if not patch_id or not build_name or not total_time or not file_path:
        messagebox.showerror("Error", "Please fill in all fields!")
        return

    try:
        status_label.config(text="Processing...", foreground="blue")
        root.update_idletasks()

        # Load report template
        if not os.path.exists(template_path):
            messagebox.showerror("Error", f"Template file not found: {template_path}")
            return

        # Ensure the output directory exists
        os.makedirs(os.path.dirname(output_csv_path), exist_ok=True)

        wb = load_workbook(template_path)

        # Read CSV
        data = pd.read_csv(file_path)
        dict_data = data.set_index('Issue key').to_dict('index')
        jira_id = list(dict_data.keys())

        # Fetch Build Name to Summary tab (B1)
        sheet = wb["Build Analysis"]
        summary_sheet = wb["Summary"]
        risk_register_sheet = wb["Risk Register"]

        sheet["A3"] = build_name
        sheet["B3"] = report_date
        sheet["E3"] = total_time

        # Format D3: Convert to Title Case
        username = os.getlogin().replace('.', ' ')
        sheet["D3"] = username.title()

        summary_sheet["B1"] = build_name

        # Save dropdown values to Risk Register
        risk_register_sheet["C3"] = auth_value
        risk_register_sheet["C4"] = authz_value

        # Save workbook with Build Name
        wb.save(output_xlsx_path)

        status_label.config(text="Process Completed Successfully!", foreground="green")
        messagebox.showinfo("Success", f"Report saved as: {output_xlsx_path}")

    except Exception as e:
        status_label.config(text="Error occurred!", foreground="red")
        messagebox.showerror("Error", str(e))

# Function to browse CSV file
def browse_csv():
    filename = filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv")])
    if filename:
        entry_csv.delete(0, "end")
        entry_csv.insert(0, filename)

# Tkinter GUI
root = Tk()
root.title("JIRA Report Processor")
root.geometry("600x400")
root.resizable(False, False)

# Labels and Inputs
Label(root, text="Patch ID:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
entry_patch_id = Entry(root, width=50)
entry_patch_id.grid(row=0, column=1, padx=5)

Label(root, text="Build Name:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
entry_build_name = Entry(root, width=50)
entry_build_name.grid(row=1, column=1, padx=5)

Label(root, text="Report Date:").grid(row=2, column=0, padx=10, pady=5, sticky="w")
date_picker = DateEntry(root, width=12, background="darkblue", foreground="white", date_pattern="yyyy-mm-dd")
date_picker.grid(row=2, column=1, sticky="w")

Label(root, text="Total Time Taken:").grid(row=3, column=0, padx=10, pady=5, sticky="w")
entry_total_time = Entry(root, width=50)
entry_total_time.grid(row=3, column=1, padx=5)

Label(root, text="Authentication:").grid(row=4, column=0, padx=10, pady=5, sticky="w")
auth_combobox = ttk.Combobox(root, values=["NA", "Done", "Not Done"], width=47)
auth_combobox.grid(row=4, column=1, padx=5)

Label(root, text="Authorization:").grid(row=5, column=0, padx=10, pady=5, sticky="w")
authz_combobox = ttk.Combobox(root, values=["NA", "Done", "Not Done"], width=47)
authz_combobox.grid(row=5, column=1, padx=5)

Label(root, text="Select CSV File:").grid(row=6, column=0, padx=10, pady=5, sticky="w")
entry_csv = Entry(root, width=40)
entry_csv.grid(row=6, column=1, padx=5, sticky="w")
Button(root, text="Browse", command=browse_csv).grid(row=6, column=2, padx=5, pady=5)

Button(root, text="Process Data", command=process_data, bg="blue", fg="white").grid(row=7, column=1, pady=20)

status_label = Label(root, text="", fg="black")
status_label.grid(row=8, column=1, pady=5)

root.mainloop()