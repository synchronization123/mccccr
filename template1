<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Findings Dashboard</title>
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .btn-edit {
            background-color: #007bff;
            color: white;
        }
        .btn-close {
            background-color: #dc3545;
            color: white;
        }
        .pagination {
            justify-content: center;
        }
    </style>
</head>
<body>

<div class="container mt-5">
    <h2>Findings Dashboard</h2>

    <!-- Filters -->
    <div class="mb-3">
        <input type="checkbox" id="filterOpen" checked> Open
        <input type="checkbox" id="filterClosed" checked> Closed
    </div>

    <div class="mb-3">
        <label for="assignedToFilter">Assigned To:</label>
        <input type="text" id="assignedToFilter" class="form-control" placeholder="Filter by assignee">
    </div>

    <div class="mb-3">
        <label for="versionFilter">Version:</label>
        <input type="text" id="versionFilter" class="form-control" placeholder="Filter by version">
    </div>

    <div id="loadingMessage" style="display:none;">Loading data...</div>

    <div id="versionCounts">
        <span id="openCount"></span> | <span id="closedCount"></span>
    </div>

    <!-- Findings Table -->
    <div class="table-responsive">
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Created Date</th>
                    <th>Description</th>
                    <th>Mitigation</th>
                    <th>Status</th>
                    <th>Resolved Date</th>
                    <th>Planned Version</th>
                    <th>Reviewed Date</th> <!-- Added Reviewed Date column -->
                </tr>
            </thead>
            <tbody id="findingsBody">
                <!-- Data will be inserted here dynamically -->
            </tbody>
        </table>
    </div>

    <nav>
        <ul class="pagination">
            <li class="page-item"><a class="page-link" id="prevPage">Previous</a></li>
            <li class="page-item disabled"><a class="page-link" id="pageInfo"></a></li>
            <li class="page-item"><a class="page-link" id="nextPage">Next</a></li>
        </ul>
    </nav>

</div>

<!-- Bootstrap 5 JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
    let findings = [];
    let currentPage = 1;
    const recordsPerPage = 6;
    let totalFindings = 0;

    async function fetchFindings() {
        try {
            // Show loading message
            document.getElementById('loadingMessage').style.display = 'block';
            
            const response = await fetch('https://demo.defectdojo.org/api/v2/findings/?limit=100000000000&offset=0&reporter=4');
            const data = await response.json();
            findings = data.results;
            totalFindings = data.count; // Total findings count
            // Hide loading message
            document.getElementById('loadingMessage').style.display = 'none';

            // Sort findings by the latest date first
            findings.sort((a, b) => new Date(b.created) - new Date(a.created));

            populateAssignedToDropdown();
            populateVersionDropdown();
            filterAndDisplayData();
        } catch (error) {
            console.error('Error fetching findings:', error);
            document.getElementById('loadingMessage').innerHTML = 'Failed to load data.';
        }
    }

    function filterAndDisplayData() {
        const filterOpen = document.getElementById('filterOpen').checked;
        const filterClosed = document.getElementById('filterClosed').checked;
        const assignedToFilter = document.getElementById('assignedToFilter').value.toLowerCase();
        const versionFilter = document.getElementById('versionFilter').value.toLowerCase();

        let filteredFindings = findings.filter(finding => {
            const isPending = !finding.is_mitigated; // Open (Pending) status
            const isVerified = finding.verified;    // Closed (Completed) status
            
            let statusMatch = (filterOpen && isPending && !isVerified) || (filterClosed && isVerified);
            let assignedMatch = assignedToFilter === "" || finding.mitigation.toLowerCase().includes(assignedToFilter);
            let versionMatch = versionFilter === "" || finding.planned_remediation_version.toLowerCase().includes(versionFilter);
            
            return statusMatch && assignedMatch && versionMatch;
        });

        updateVersionCounts(filteredFindings);
        paginateAndDisplay(filteredFindings);
    }

    function paginateAndDisplay(data) {
        const startIndex = (currentPage - 1) * recordsPerPage;
        const paginatedData = data.slice(startIndex, startIndex + recordsPerPage);

        const tableBody = document.getElementById('findingsBody');
        tableBody.innerHTML = "";

        paginatedData.forEach(finding => {
            const row = document.createElement('tr');
            row.innerHTML = ` 
                <td>${finding.title || 'N/A'}</td>
                <td>${formatDate(finding.created) || 'N/A'}</td>
                <td>${finding.description || 'N/A'}</td>
                <td>${finding.mitigation || 'N/A'}</td>
                <td>${finding.verified ? 'Closed' : 'Open'}</td>
                <td>${formatDate(finding.date) || 'N/A'}</td>
                <td>${finding.planned_remediation_version || 'N/A'}</td>
                <td>${formatReviewedDate(finding.Last_reviewed_by_changed)}</td> <!-- Display Reviewed Date -->
                <td>
                <button class="btn btn-edit" onclick="window.open('https://demo.defectdojo.org/finding/${finding.id}/edit?return_url=/finding', '_blank')">Edit</button>
                <button class="btn btn-close" onclick="window.open('https://demo.defectdojo.org/finding/${finding.id}/close', '_blank')">Close</button>
            </td>
            `;
            tableBody.appendChild(row);
        });

        const pageInfo = document.getElementById('pageInfo');
        pageInfo.innerText = `Page ${currentPage} of ${Math.ceil(data.length / recordsPerPage)}`;

        document.getElementById('prevPage').classList.toggle('disabled', currentPage === 1);
        document.getElementById('nextPage').classList.toggle('disabled', currentPage * recordsPerPage >= data.length);
    }

    function formatDate(date) {
        if (!date) return '';
        const d = new Date(date);
        return d.toLocaleDateString();
    }

    function formatReviewedDate(reviewedDate) {
        if (!reviewedDate || reviewedDate === "None") return ''; // Handle None or empty reviewed date
        const date = new Date(reviewedDate);
        const options = { day: '2-digit', month: 'short', year: 'numeric' };
        return date.toLocaleDateString('en-GB', options); // Format as DD-MMM-YYYY
    }

    function updateVersionCounts(filteredFindings) {
        const openCount = filteredFindings.filter(f => !f.is_mitigated && !f.verified).length;
        const closedCount = filteredFindings.filter(f => f.verified).length;

        document.getElementById('openCount').innerText = `Open: ${openCount}`;
        document.getElementById('closedCount').innerText = `Closed: ${closedCount}`;
    }

    function populateAssignedToDropdown() {
        const assignedToFilter = document.getElementById('assignedToFilter');
        const uniqueAssignees = [...new Set(findings.map(f => f.mitigation))];
        uniqueAssignees.forEach(assignee => {
            const option = document.createElement('option');
            option.value = assignee;
            option.innerText = assignee || 'Unassigned';
            assignedToFilter.appendChild(option);
        });
    }

    function populateVersionDropdown() {
        const versionFilter = document.getElementById('versionFilter');
        const uniqueVersions = [...new Set(findings.map(f => f.planned_remediation_version))];
        uniqueVersions.forEach(version => {
            const option = document.createElement('option');
            option.value = version;
            option.innerText = version || 'No Version';
            versionFilter.appendChild(option);
        });
    }

    document.getElementById('prevPage').addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            filterAndDisplayData();
        }
    });

    document.getElementById('nextPage').addEventListener('click', () => {
        if (currentPage * recordsPerPage < findings.length) {
            currentPage++;
            filterAndDisplayData();
        }
    });

    document.getElementById('filterOpen').addEventListener('change', filterAndDisplayData);
    document.getElementById('filterClosed').addEventListener('change', filterAndDisplayData);
    document.getElementById('assignedToFilter').addEventListener('change', filterAndDisplayData);
    document.getElementById('versionFilter').addEventListener('change', filterAndDisplayData);

    fetchFindings();
</script>

</body>
</html>