<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Findings Table</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .table th, .table td {
            text-align: center;
        }
        .pagination {
            justify-content: center;
        }
        .disabled {
            pointer-events: none;
            opacity: 0.5;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h2>Findings Table</h2>
        
        <div class="form-group row">
            <div class="col-md-3">
                <label for="assignedToFilter">Assigned To</label>
                <select id="assignedToFilter" class="form-control">
                    <option value="">Select Assignee</option>
                </select>
            </div>
            <div class="col-md-3">
                <label for="versionFilter">Version</label>
                <select id="versionFilter" class="form-control">
                    <option value="">Select Version</option>
                </select>
            </div>
            <div class="col-md-3">
                <label for="reviewedDateFilter">Reviewed Date</label>
                <input type="date" id="reviewedDateFilter" class="form-control">
            </div>
            <div class="col-md-3">
                <label for="filterOpen">Filter Open</label>
                <input type="checkbox" id="filterOpen">
            </div>
            <div class="col-md-3">
                <label for="filterClosed">Filter Closed</label>
                <input type="checkbox" id="filterClosed">
            </div>
        </div>
        
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Finding ID</th>
                    <th>Finding Title</th>
                    <th>Mitigation</th>
                    <th>Reviewed Date</th>
                    <th>Planned Remediation Version</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="findingsTableBody">
                <!-- Findings rows will be inserted here -->
            </tbody>
        </table>
        
        <div class="pagination">
            <button id="prevPage" class="btn btn-primary">Previous</button>
            <span id="pageInfo"></span>
            <button id="nextPage" class="btn btn-primary">Next</button>
        </div>
        
        <div id="openCount">Open: 0</div>
        <div id="closedCount">Closed: 0</div>
    </div>

    <script>
        let findings = []; // This will hold all the fetched findings
        let currentPage = 1;
        const recordsPerPage = 10;

        async function fetchFindings() {
            // Fetch data from DefectDojo or API endpoint
            const response = await fetch('https://demo.defectdojo.org/api/v2/findings/');
            const data = await response.json();
            findings = data.results;
            filterAndDisplayData();
            populateAssignedToDropdown();
            populateVersionDropdown();
        }

        function filterAndDisplayData() {
            const assignedTo = document.getElementById('assignedToFilter').value;
            const version = document.getElementById('versionFilter').value;
            const reviewedDate = document.getElementById('reviewedDateFilter').value;
            const filterOpen = document.getElementById('filterOpen').checked;
            const filterClosed = document.getElementById('filterClosed').checked;

            const filteredFindings = findings.filter(finding => {
                return (!assignedTo || finding.mitigation === assignedTo) &&
                       (!version || finding.planned_remediation_version === version) &&
                       (!reviewedDate || formatReviewedDate(finding.reviewed_date) === reviewedDate) &&
                       (!filterOpen || (!finding.is_mitigated && !finding.verified)) &&
                       (!filterClosed || finding.verified);
            });

            displayTableData(filteredFindings);
            updateVersionCounts(filteredFindings);
        }

        function displayTableData(filteredFindings) {
            const tableBody = document.getElementById('findingsTableBody');
            tableBody.innerHTML = '';

            const startIndex = (currentPage - 1) * recordsPerPage;
            const endIndex = Math.min(startIndex + recordsPerPage, filteredFindings.length);
            const paginatedFindings = filteredFindings.slice(startIndex, endIndex);

            paginatedFindings.forEach(finding => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${finding.id}</td>
                    <td>${finding.title}</td>
                    <td>${finding.mitigation || 'None'}</td>
                    <td>${formatReviewedDate(finding.reviewed_date)}</td>
                    <td>${finding.planned_remediation_version || 'No Version'}</td>
                    <td>
                        <button class="btn btn-edit" onclick="window.open('https://demo.defectdojo.org/finding/${finding.id}/edit?return_url=/finding', '_blank')">Edit</button>
                        <button class="btn btn-close" onclick="window.open('https://demo.defectdojo.org/finding/${finding.id}/close', '_blank')">Close</button>
                    </td>
                `;
                tableBody.appendChild(row);
            });

            const pageInfo = document.getElementById('pageInfo');
            pageInfo.innerText = `Page ${currentPage} of ${Math.ceil(filteredFindings.length / recordsPerPage)}`;

            document.getElementById('prevPage').classList.toggle('disabled', currentPage === 1);
            document.getElementById('nextPage').classList.toggle('disabled', currentPage * recordsPerPage >= filteredFindings.length);
        }

        function formatReviewedDate(reviewedDate) {
            if (!reviewedDate || reviewedDate === "None") return ''; // Handle None or empty reviewed date
            const date = new Date(reviewedDate);
            const options = { day: '2-digit', month: 'short', year: 'numeric' };
            return date.toLocaleDateString('en-GB', options); // Format as DD-MMM-YYYY
        }

        function updateVersionCounts(filteredFindings) {
            const openCount = filteredFindings.filter(f => !f.is_mitigated && !f.verified).length;
            const closedCount = filteredFindings.filter(f => f.verified).length;

            document.getElementById('openCount').innerText = `Open: ${openCount}`;
            document.getElementById('closedCount').innerText = `Closed: ${closedCount}`;
        }

        function populateAssignedToDropdown() {
            const assignedToFilter = document.getElementById('assignedToFilter');
            const uniqueAssignees = [...new Set(findings.map(f => f.mitigation))];

            assignedToFilter.innerHTML = '<option value="">Select Assignee</option>'; // Clear previous options
            uniqueAssignees.forEach(assignee => {
                const option = document.createElement('option');
                option.value = assignee;
                option.innerText = assignee || 'Unassigned';
                assignedToFilter.appendChild(option);
            });
        }

        function populateVersionDropdown() {
            const versionFilter = document.getElementById('versionFilter');
            const uniqueVersions = [...new Set(findings.map(f => f.planned_remediation_version))];

            versionFilter.innerHTML = '<option value="">Select Version</option>'; // Clear previous options
            uniqueVersions.forEach(version => {
                const option = document.createElement('option');
                option.value = version;
                option.innerText = version || 'No Version';
                versionFilter.appendChild(option);
            });
        }

        document.getElementById('prevPage').addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                filterAndDisplayData();
            }
        });

        document.getElementById('nextPage').addEventListener('click', () => {
            if (currentPage * recordsPerPage < findings.length) {
                currentPage++;
                filterAndDisplayData();
            }
        });

        document.getElementById('assignedToFilter').addEventListener('change', filterAndDisplayData);
        document.getElementById('versionFilter').addEventListener('change', filterAndDisplayData);
        document.getElementById('reviewedDateFilter').addEventListener('change', filterAndDisplayData);
        document.getElementById('filterOpen').addEventListener('change', filterAndDisplayData);
        document.getElementById('filterClosed').addEventListener('change', filterAndDisplayData);

        // Refresh table every 5 minutes
        setInterval(fetchFindings, 5 * 60 * 1000); // 5 minutes in milliseconds

        // Initial fetch of data
        fetchFindings();
    </script>
</body>
</html>