import requests
import json
import time
import threading
import tkinter as tk
from tkinter.scrolledtext import ScrolledText
from plyer import notification
import pystray
from pystray import MenuItem as item, Icon
from PIL import Image, ImageDraw

# API Configuration
ORG_UUID = "your_correct_org_uuid"  # Replace with actual Org UUID
CONTRAST_API_URL = f"https://app.contrastsecurity.com/ng/{ORG_UUID}/orgtraces/ids"

HEADERS = {
    "Authorization": "Bearer YOUR_VALID_API_TOKEN",
    "Api-key": "YOUR_VALID_API_KEY",
    "Accept": "application/json"
}

PARAMS = {
    "severities": "CRITICAL,HIGH",
    "status": "REPORTED"
}

# Global variables
initial_traces = set()  # Store initial trace IDs
tray_icon = None  # System tray icon
running = True  # Control the monitoring loop

# GUI Logger Function
def log_message(msg):
    console_text.insert(tk.END, msg + "\n")
    console_text.yview(tk.END)
    print(msg)

# Fetch latest reported traces
def get_latest_traces():
    try:
        response = requests.get(CONTRAST_API_URL, headers=HEADERS, params=PARAMS)
        log_message(f"[DEBUG] API Response Code: {response.status_code}")

        if response.status_code == 200:
            data = response.json()
            if data.get("success"):
                return set(data.get("traces", []))
            else:
                log_message("[WARNING] API response success=False. Check API permissions.")
                return set()
        elif response.status_code == 403:
            log_message("[ERROR] 403 Forbidden - Authorization failure. Check API Key & Token.")
        elif response.status_code == 401:
            log_message("[ERROR] 401 Unauthorized. Check API Token or Org UUID.")
        else:
            log_message(f"[ERROR] API Error: {response.status_code}")
    except Exception as e:
        log_message(f"[ERROR] Exception: {str(e)}")
    return set()

# Monitoring function
def monitor_traces():
    global initial_traces

    log_message("[INFO] Fetching initial traces...")
    initial_traces = get_latest_traces()
    log_message(f"[INFO] Initial traces count: {len(initial_traces)}")
    log_message(f"[INFO] Initial trace IDs: {list(initial_traces)}")

    while running:
        time.sleep(300)  # Check every 5 minutes
        log_message("[INFO] Checking for new traces...")

        latest_traces = get_latest_traces()
        new_traces = latest_traces - initial_traces  # Find only added traces

        if new_traces:
            log_message(f"[ALERT] New traces detected: {len(new_traces)}")
            log_message(f"[INFO] New Trace IDs: {list(new_traces)}")
            for trace in new_traces:
                notification.notify(
                    title="Security Alert",
                    message=f"A High/Critical trace has been reported! Trace ID: {trace}",
                    timeout=5
                )
            initial_traces = latest_traces  # Update known traces
        else:
            log_message("[INFO] No new traces found.")

# System tray icon
def create_icon():
    global tray_icon
    image = Image.new("RGB", (64, 64), (255, 0, 0))
    draw = ImageDraw.Draw(image)
    draw.rectangle((10, 10, 54, 54), fill=(255, 255, 255))

    menu = (item("Open Console", show_console), item("Exit", exit_app))
    tray_icon = Icon("TraceMonitor", image, "Trace Monitor", menu)
    tray_icon.run()

# Show GUI console
def show_console(icon, item):
    root.deiconify()

# Exit application
def exit_app(icon, item):
    global running
    running = False
    tray_icon.stop()
    root.quit()

# GUI Setup
root = tk.Tk()
root.title("Trace Monitor")
root.geometry("500x300")

console_text = ScrolledText(root, wrap=tk.WORD, height=15)
console_text.pack(fill=tk.BOTH, expand=True)

# Hide window to system tray initially
root.withdraw()

# Start monitoring in a separate thread
monitor_thread = threading.Thread(target=monitor_traces, daemon=True)
monitor_thread.start()

# Start system tray icon in a separate thread
tray_thread = threading.Thread(target=create_icon, daemon=True)
tray_thread.start()

# Run GUI event loop
root.mainloop()