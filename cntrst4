import time
import json
import requests
import threading
import tkinter as tk
from tkinter import scrolledtext
from plyer import notification
from pystray import Icon, MenuItem, Menu
from PIL import Image, ImageDraw

# ðŸ”¹ Contrast API Configuration
ORG_UUID = "your_org_uuid"

CONTRAST_API_URL = f"https://app.contrastsecurity.com/ng/{ORG_UUID}/orgtraces/ids"

# ðŸ”¹ Custom Headers
HEADERS = {
    "Authorization": "gdhdjdjdjddj=",  # Your Authorization Token
    "Api-key": "jjjdjdj777",  # Your API Key
    "Accept": "application/json"
}

# Query Parameters
PARAMS = {"severities": "CRITICAL,HIGH", "status": "REPORTED"}

# Store Seen Traces
LAST_TRACE_IDS = set()
MONITORING = True
gui_window = None

# ðŸ”¹ Function to Log Messages in GUI Console
def log_message(message):
    print(message)  # Print to console
    if gui_window:
        gui_window.log_area.insert(tk.END, message + "\n")
        gui_window.log_area.yview(tk.END)

# ðŸ”¹ Function to Fetch Latest Traces
def get_latest_traces():
    """Fetch latest reported traces from Contrast API."""
    try:
        log_message("[DEBUG] Checking Contrast Security API...")
        response = requests.get(CONTRAST_API_URL, headers=HEADERS, params=PARAMS)

        log_message(f"[DEBUG] Response Code: {response.status_code}")
        log_message(f"[DEBUG] Response Body: {response.text}")

        if response.status_code == 200:
            data = response.json()
            if data.get("success"):
                return set(data.get("traces", []))
            else:
                log_message("[WARNING] API response success=False. Check API permissions.")
                return set()
        elif response.status_code == 401:
            log_message("[ERROR] 401 Unauthorized. Check API Token, API Key, or Org UUID.")
            return set()
        else:
            log_message(f"[ERROR] API Error: {response.status_code}")
            return set()
    except Exception as e:
        log_message(f"[ERROR] Exception: {str(e)}")
        return set()

# ðŸ”¹ Function to Show Toast Notification
def notify_user(severity):
    """Displays a toast notification for new traces."""
    notification.notify(
        title=f"New {severity} Severity Trace Reported",
        message="A new trace has been reported. Please check.",
        timeout=10
    )

# ðŸ”¹ Function to Check for New Traces
def check_for_new_traces():
    """Checks for new traces and sends notifications if found."""
    global LAST_TRACE_IDS
    latest_traces = get_latest_traces()

    if not latest_traces:
        log_message("[INFO] No new traces found.")
        return

    new_traces = latest_traces - LAST_TRACE_IDS
    if new_traces:
        for trace_id in new_traces:
            log_message(f"[ALERT] New trace detected: {trace_id}")
            notify_user("High/Critical")
        LAST_TRACE_IDS = latest_traces  # Update seen traces

# ðŸ”¹ Background Monitoring Task
def background_task():
    """Runs trace checking every 5 minutes."""
    while MONITORING:
        log_message("[INFO] Monitoring Contrast Security for new traces...")
        check_for_new_traces()
        time.sleep(300)

# ðŸ”¹ GUI Console Window
class ConsoleWindow:
    """GUI Window to show log messages."""
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Contrast Notifier Console")
        self.root.geometry("600x400")

        self.log_area = scrolledtext.ScrolledText(self.root, wrap=tk.WORD, width=70, height=20)
        self.log_area.pack(pady=10, padx=10, fill=tk.BOTH, expand=True)

        close_button = tk.Button(self.root, text="Close", command=self.close_window)
        close_button.pack(pady=5)

    def close_window(self):
        """Closes the GUI but keeps the script running."""
        global gui_window
        gui_window = None
        self.root.destroy()

    def run(self):
        """Starts the GUI main loop."""
        self.root.mainloop()

# ðŸ”¹ Function to Open GUI Console
def open_console():
    """Opens the GUI console."""
    global gui_window
    if gui_window is None:
        gui_window = ConsoleWindow()
        gui_window.run()

# ðŸ”¹ Function to Quit App from System Tray
def quit_app(icon, item):
    """Stops the script when exiting from the tray."""
    global MONITORING
    MONITORING = False
    icon.stop()
    log_message("[INFO] Notifier exited.")

# ðŸ”¹ Create System Tray Icon
def create_icon():
    """Creates a system tray icon."""
    image = Image.new("RGB", (64, 64), (255, 255, 255))
    draw = ImageDraw.Draw(image)
    draw.rectangle((10, 10, 54, 54), fill="black")
    return image

# ðŸ”¹ System Tray Menu
menu = Menu(
    MenuItem("Open Console", open_console),
    MenuItem("Exit", quit_app)
)

# ðŸ”¹ Start System Tray Icon
icon = Icon("Contrast Notifier", create_icon(), menu=menu)

# ðŸ”¹ Start Background Monitoring Thread
thread = threading.Thread(target=background_task, daemon=True)
thread.start()

# ðŸ”¹ Run System Tray Application
icon.run()