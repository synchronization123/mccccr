import time
import json
import requests
import threading
import tkinter as tk
from tkinter import scrolledtext
from plyer import notification
from pystray import Icon, MenuItem, Menu
from PIL import Image, ImageDraw

# Contrast API Configuration
ORG_UUID = "your_org_uuid"
CONTRAST_API_URL = f"https://app.contrastsecurity.com/ng/{ORG_UUID}/orgtraces/ids"
API_KEY = "your_api_key"
HEADERS = {"Authorization": f"Bearer {API_KEY}"}
PARAMS = {"severities": "CRITICAL,HIGH", "status": "REPORTED"}

# Maintain seen trace IDs
LAST_TRACE_IDS = set()
MONITORING = True  # Flag for background process
gui_window = None  # GUI window reference

def create_icon():
    """Creates a simple system tray icon."""
    image = Image.new("RGB", (64, 64), (255, 255, 255))
    draw = ImageDraw.Draw(image)
    draw.rectangle((10, 10, 54, 54), fill="black")
    return image

def log_message(message):
    """Logs messages to the GUI console."""
    global gui_window
    print(message)  # Always log to terminal too
    if gui_window:
        gui_window.log_area.insert(tk.END, message + "\n")
        gui_window.log_area.yview(tk.END)

def get_latest_traces():
    """Fetches the latest traces from Contrast API."""
    try:
        response = requests.get(CONTRAST_API_URL, headers=HEADERS, params=PARAMS)
        if response.status_code == 200:
            data = response.json()
            if data.get("success"):
                return set(data.get("traces", []))
            else:
                log_message("[WARNING] API Response: Success flag is False")
                return set()
        else:
            log_message(f"[ERROR] API Error: {response.status_code}")
            return set()
    except Exception as e:
        log_message(f"[ERROR] Failed to fetch traces: {str(e)}")
        return set()

def notify_user(severity):
    """Shows a toast notification for a new trace."""
    notification.notify(
        title=f"New {severity} Severity Trace Reported",
        message="A new trace has been reported. Please check.",
        timeout=10
    )

def check_for_new_traces():
    """Checks for new traces and sends notifications if found."""
    global LAST_TRACE_IDS
    latest_traces = get_latest_traces()

    new_traces = latest_traces - LAST_TRACE_IDS
    if new_traces:
        for trace_id in new_traces:
            log_message(f"[ALERT] New trace detected: {trace_id}")
            notify_user("High/Critical")  # Assuming severity is always Critical/High
        LAST_TRACE_IDS = latest_traces  # Update seen traces

def background_task():
    """Runs trace checking every 5 minutes."""
    while MONITORING:
        log_message("[INFO] Monitoring Contrast Security for new traces...")
        check_for_new_traces()
        time.sleep(300)  # Wait for 5 minutes

class ConsoleWindow:
    """GUI Window to show log messages."""
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Contrast Notifier Console")
        self.root.geometry("600x400")

        # Log display area
        self.log_area = scrolledtext.ScrolledText(self.root, wrap=tk.WORD, width=70, height=20)
        self.log_area.pack(pady=10, padx=10, fill=tk.BOTH, expand=True)

        # Close button
        close_button = tk.Button(self.root, text="Close", command=self.close_window)
        close_button.pack(pady=5)

    def close_window(self):
        """Closes the GUI but keeps the script running in the background."""
        global gui_window
        gui_window = None
        self.root.destroy()

    def run(self):
        """Starts the GUI main loop."""
        self.root.mainloop()

def open_console():
    """Opens the GUI console."""
    global gui_window
    if gui_window is None:
        gui_window = ConsoleWindow()
        gui_window.run()

def quit_app(icon, item):
    """Stops the script when exiting from the tray."""
    global MONITORING
    MONITORING = False
    icon.stop()
    log_message("[INFO] Notifier exited.")

# Setup system tray menu
menu = Menu(
    MenuItem("Open Console", open_console),
    MenuItem("Exit", quit_app)
)

# Create and run system tray icon
icon = Icon("Contrast Notifier", create_icon(), menu=menu)

# Start background thread
thread = threading.Thread(target=background_task, daemon=True)
thread.start()

# Run the system tray application
icon.run()