import os 
import pandas as pd
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter
 
# Take user inputs
patch_id = input("Enter the APU-ID    :    ")
file_path = input("Enter the file path for CSV dump    :    ")
final_report_path = input("Enter the file path for FinalReport Excel file    :    ")
 
# Read the CSV dump file
data = pd.read_csv(file_path)
 
# Convert data into a dictionary with 'Issue key' as the index
dict_data = data.set_index('Issue key').to_dict('index')
jira_id = list(dict_data.keys())
security_comment = []
manual_testing = []
jira_type = []
securityJiraFilter = ['security' , 'appsecurity', 'ram', 'dan', 'kan', 'van']
why_manual_testing_not_requered = []
 
# Process data for required columns
for key in dict_data:
 
    flag_jira_type = False
    flag_security_comment = False
    flag_manual_testing = False
 
    for key1 in dict_data[key]:
        comment = str(dict_data[key][key1]).lower()
        if not flag_security_comment and patch_id in comment and 'security validation' in comment:
            security_comment.append(comment.split('comments:')[1][:-3])
            flag_security_comment = True
 
            if 'manual testing:' in comment:
                manualTesting = comment.split('manual testing:')[1][:6]
                if not flag_manual_testing and 'done' in manualTesting:
                    manual_testing.append('Done')
                    flag_manual_testing = True
 
        if not flag_jira_type and ('Component' in str(key1) or 'QA-TeamLead' in str(key1)):
            if comment.lower() in securityJiraFilter:
                flag_jira_type = True
                jira_type.append('Security Jira')
 
    if not flag_jira_type:
        jira_type.append('Functional Jira')
 
    if not flag_security_comment:
        security_comment.append('NA')
 
    if not flag_manual_testing:
        manual_testing.append('NA')
 
    if manual_testing[-1] == 'Done':
        why_manual_testing_not_requered.append(' ')
    elif jira_type[-1] == 'Functional Jira':
        why_manual_testing_not_requered.append('It is a functional jira. Code review is done to check for security vulnerabilities')
    elif(jira_type[-1] == 'Security Jira'):
        why_manual_testing_not_requered.append('This security issue was observed during Code Review. Code review was done to find the security issue')
    else:
        why_manual_testing_not_requered.append('NA')
 
# Create DataFrame for extracted data
final_dict = {
    'Jira ID': jira_id,
    'Security Comment': security_comment,
    'Jira Type': jira_type,
    'Manual Testing': manual_testing,
    'Why manual testing is not required?': why_manual_testing_not_requered
}

jira_id_length = len(jira_id) 

df = pd.DataFrame(final_dict)
 
# Save the extracted data to CSV
df.to_csv('output.csv', index=False)
 
# Load the existing FinalReport workbook to preserve formatting
wb = load_workbook(final_report_path)
sheet = wb["Build Analysis"]
 
# Find column indexes based on headers
header_row = 1  # Assuming headers are in the first row
headers = {cell.value: cell.column for cell in sheet[header_row] if cell.value}
 
# Function to find the top-left cell of a merged range
def get_top_left_of_merged(sheet, row, col):
    for merged_range in sheet.merged_cells.ranges:
        if (row, col) in merged_range.cells:
            return merged_range.min_row, merged_range.min_col
    return row, col
 
# Write "Issue Key (JIRA ID)" column values first, ensuring not to overwrite headers
for i, jira_id in enumerate(df["Jira ID"], start=3):
    if headers.get("Issue Key (JIRA ID)"):
        row, col = get_top_left_of_merged(sheet, i, headers["Issue Key (JIRA ID)"])
        if row > 1:  # Avoid modifying header row
            sheet.cell(row=row, column=col, value=jira_id)
 
# Paste "Jira Type" column values starting from G3
for i, jira_type in enumerate(df["Jira Type"], start=3):
    sheet["G" + str(i)] = jira_type
 
# Paste "Manual Testing" column values starting from I3
for i, manual_testing in enumerate(df["Manual Testing"], start=3):
    sheet["I" + str(i)] = manual_testing
 
# Paste "Security Comment" column values starting from J3
for i, security_comment in enumerate(df["Security Comment"], start=3):
    sheet["J" + str(i)] = security_comment
 
# Paste "why Manual Testing not required" column values starting from K3
for i, why_manual_testing_not_requered in enumerate(df["Why manual testing is not required?"], start=3):
    sheet["K" + str(i)] = why_manual_testing_not_requered
 
sheet["C3"] = jira_id_length
sheet["D3"] = os.getlogin().replace('.', ' ')

 
# Save the updated file while keeping formatting
wb.save(final_report_path)
 
print("Data successfully updated in FinalReport.xlsx under 'Build Analysis' sheet with formatting preserved and headers unchanged.")

