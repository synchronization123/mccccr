import sys
import os
import pandas as pd
from openpyxl import load_workbook
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QLabel, QLineEdit,
    QPushButton, QFileDialog, QTextEdit, QMessageBox, QProgressBar
)
from PyQt6.QtGui import QFont
from PyQt6.QtCore import Qt, QThread, pyqtSignal


class ProcessingThread(QThread):
    progress_signal = pyqtSignal(str)
    completed_signal = pyqtSignal(bool)

    def __init__(self, patch_id, file_path, final_report_path):
        super().__init__()
        self.patch_id = patch_id
        self.file_path = file_path
        self.final_report_path = final_report_path

    def run(self):
        try:
            self.progress_signal.emit("Reading CSV file...")
            data = pd.read_csv(self.file_path)

            dict_data = data.set_index('Issue key').to_dict('index')
            jira_id = list(dict_data.keys())
            security_comment, manual_testing, jira_type = [], [], []
            securityJiraFilter = ['security', 'appsecurity', 'ram', 'dan', 'kan', 'van']
            why_manual_testing_not_requered = []

            for key in dict_data:
                flag_jira_type, flag_security_comment, flag_manual_testing = False, False, False

                for key1 in dict_data[key]:
                    comment = str(dict_data[key][key1]).lower()
                    if not flag_security_comment and self.patch_id in comment and 'security validation' in comment:
                        security_comment.append(comment.split('comments:')[1][:-3])
                        flag_security_comment = True

                        if 'manual testing:' in comment:
                            manualTesting = comment.split('manual testing:')[1][:6]
                            if not flag_manual_testing and 'done' in manualTesting:
                                manual_testing.append('Done')
                                flag_manual_testing = True

                    if not flag_jira_type and ('Component' in str(key1) or 'QA-TeamLead' in str(key1)):
                        if comment in securityJiraFilter:
                            flag_jira_type = True
                            jira_type.append('Security Jira')

                if not flag_jira_type:
                    jira_type.append('Functional Jira')

                if not flag_security_comment:
                    security_comment.append('NA')

                if not flag_manual_testing:
                    manual_testing.append('NA')

                why_manual_testing_not_requered.append(
                    ' ' if manual_testing[-1] == 'Done' else
                    'It is a functional jira. Code review is done to check for security vulnerabilities' if jira_type[-1] == 'Functional Jira' else
                    'This security issue was observed during Code Review. Code review was done to find the security issue' if jira_type[-1] == 'Security Jira' else 'NA'
                )

            final_dict = {
                'Jira ID': jira_id,
                'Security Comment': security_comment,
                'Jira Type': jira_type,
                'Manual Testing': manual_testing,
                'Why manual testing is not required?': why_manual_testing_not_requered
            }

            df = pd.DataFrame(final_dict)
            df.to_csv('output.csv', index=False)

            self.progress_signal.emit("Updating Excel file...")
            wb = load_workbook(self.final_report_path)
            sheet = wb["Build Analysis"]

            for i, jira_id in enumerate(df["Jira ID"], start=3):
                sheet.cell(row=i, column=3, value=jira_id)  # Assuming "Issue Key" is in column C

            for i, jira_type in enumerate(df["Jira Type"], start=3):
                sheet["G" + str(i)] = jira_type

            for i, manual_testing in enumerate(df["Manual Testing"], start=3):
                sheet["I" + str(i)] = manual_testing

            for i, security_comment in enumerate(df["Security Comment"], start=3):
                sheet["J" + str(i)] = security_comment

            for i, why_manual_testing_not_requered in enumerate(df["Why manual testing is not required?"], start=3):
                sheet["K" + str(i)] = why_manual_testing_not_requered

            sheet["C3"] = len(jira_id)
            sheet["D3"] = os.getlogin().replace('.', ' ')
            wb.save(self.final_report_path)

            self.progress_signal.emit("Processing completed successfully.")
            self.completed_signal.emit(True)

        except Exception as e:
            self.progress_signal.emit(f"Error: {str(e)}")
            self.completed_signal.emit(False)


class ModernGUI(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle("Modern Python GUI")
        self.setGeometry(100, 100, 500, 500)
        self.setStyleSheet("background-color: #2C3E50; color: white; border-radius: 10px;")

        layout = QVBoxLayout()

        title = QLabel("Excel Data Processor")
        title.setFont(QFont("Arial", 18, QFont.Weight.Bold))
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)

        self.patch_id_input = QLineEdit()
        self.patch_id_input.setPlaceholderText("Enter APU-ID")
        self.patch_id_input.setStyleSheet("background-color: #34495E; color: white; padding: 8px; border-radius: 5px;")

        self.file_btn = QPushButton("Select CSV Dump")
        self.file_btn.clicked.connect(self.select_csv)

        self.excel_btn = QPushButton("Select Final Report Excel")
        self.excel_btn.clicked.connect(self.select_excel)

        self.start_btn = QPushButton("Start Processing")
        self.start_btn.clicked.connect(self.process_data)
        self.start_btn.setStyleSheet("background-color: #1ABC9C; color: white; padding: 10px; border-radius: 5px;")

        self.status_text = QTextEdit()
        self.status_text.setReadOnly(True)
        self.status_text.setStyleSheet("background-color: #1E272E; color: white; border-radius: 5px;")

        self.progress_bar = QProgressBar()
        self.progress_bar.setStyleSheet("QProgressBar { border: 2px solid white; border-radius: 5px; }")

        layout.addWidget(title)
        layout.addWidget(self.patch_id_input)
        layout.addWidget(self.file_btn)
        layout.addWidget(self.excel_btn)
        layout.addWidget(self.start_btn)
        layout.addWidget(self.progress_bar)
        layout.addWidget(self.status_text)

        self.setLayout(layout)

    def select_csv(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Select CSV File", "", "CSV Files (*.csv)")
        if file_path:
            self.file_btn.setText(file_path)

    def select_excel(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Select Excel File", "", "Excel Files (*.xlsx)")
        if file_path:
            self.excel_btn.setText(file_path)

    def process_data(self):
        patch_id = self.patch_id_input.text()
        csv_path = self.file_btn.text()
        excel_path = self.excel_btn.text()

        if not patch_id or "Select" in csv_path or "Select" in excel_path:
            QMessageBox.warning(self, "Warning", "Please provide all inputs!")
            return

        self.thread = ProcessingThread(patch_id, csv_path, excel_path)
        self.thread.progress_signal.connect(self.status_text.append)
        self.thread.completed_signal.connect(lambda success: QMessageBox.information(self, "Done", "Processing Completed!") if success else None)
        self.thread.start()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    gui = ModernGUI()
    gui.show()
    sys.exit(app.exec())