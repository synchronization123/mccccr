import os
import json
import pandas as pd
from openpyxl import load_workbook
from tkinter import filedialog, messagebox, ttk, Tk, Label, Entry, Button, Menu
from tkcalendar import DateEntry

# JSON file to store template path
CONFIG_FILE = "template.json"

# Function to save template path in JSON
def save_template_path(template_path):
    with open(CONFIG_FILE, "w") as file:
        json.dump({"template_path": template_path}, file)

# Function to load template path from JSON
def load_template_path():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r") as file:
            data = json.load(file)
            return data.get("template_path", "")
    return ""

# Function to browse and configure template path
def configure_template():
    template_path = filedialog.askopenfilename(filetypes=[("Excel Files", "*.xlsx")])
    if template_path:
        save_template_path(template_path)
        messagebox.showinfo("Success", f"Template path saved:\n{template_path}")

# Function to process data
def process_data():
    patch_id = entry_patch_id.get().strip()
    build_name = entry_build_name.get().strip()
    total_time = entry_total_time.get().strip()
    report_date = date_picker.get_date().strftime("%Y-%m-%d")
    file_path = entry_csv.get().strip()
    
    template_path = load_template_path()
    if not template_path or not os.path.exists(template_path):
        messagebox.showerror("Error", "Template file not found! Please configure the template.")
        return

    if not patch_id or not build_name or not total_time or not file_path:
        messagebox.showerror("Error", "Please fill in all fields!")
        return

    try:
        status_label.config(text="Processing...", foreground="blue")
        root.update_idletasks()

        final_report_path = f"{build_name}.xlsx"

        # Remove file if it exists to avoid permission issues
        if os.path.exists(final_report_path):
            os.remove(final_report_path)

        wb = load_workbook(template_path)

        # Read CSV
        data = pd.read_csv(file_path)
        dict_data = data.set_index('Issue key').to_dict('index')
        jira_id = list(dict_data.keys())

        security_comment, manual_testing, jira_type = [], [], []
        why_manual_testing_not_required = []
        securityJiraFilter = ['security', 'appsecurity', 'ram', 'dan', 'kan', 'van']

        for key in dict_data:
            flag_jira_type, flag_security_comment, flag_manual_testing = False, False, False
            for key1 in dict_data[key]:
                comment = str(dict_data[key][key1]).lower()

                if not flag_security_comment and patch_id in comment and 'security validation' in comment:
                    security_comment.append(comment.split('comments:')[1][:-3])
                    flag_security_comment = True

                    if 'manual testing:' in comment:
                        manualTesting = comment.split('manual testing:')[1][:6]
                        if not flag_manual_testing and 'done' in manualTesting:
                            manual_testing.append('Done')
                            flag_manual_testing = True

                if not flag_jira_type and ('Component' in str(key1) or 'QA-TeamLead' in str(key1)):
                    if comment.lower() in securityJiraFilter:
                        flag_jira_type = True
                        jira_type.append('Security Jira')

            if not flag_jira_type:
                jira_type.append('Functional Jira')
            if not flag_security_comment:
                security_comment.append('NA')
            if not flag_manual_testing:
                manual_testing.append('NA')

            if manual_testing[-1] == 'Done':
                why_manual_testing_not_required.append(' ')
            elif jira_type[-1] == 'Functional Jira':
                why_manual_testing_not_required.append(
                    'It is a functional jira. Code review is done to check for security vulnerabilities'
                )
            elif jira_type[-1] == 'Security Jira':
                why_manual_testing_not_required.append(
                    'This security issue was observed during Code Review. Code review was done to find the security issue'
                )
            else:
                why_manual_testing_not_required.append('NA')

        df = pd.DataFrame({
            'Jira ID': jira_id,
            'Security Comment': security_comment,
            'Jira Type': jira_type,
            'Manual Testing': manual_testing,
            'Why manual testing is not required?': why_manual_testing_not_required
        })

        output_csv_path = os.path.join(os.getcwd(), "output.csv")

        # Remove old CSV file if it exists
        if os.path.exists(output_csv_path):
            os.remove(output_csv_path)

        # Write CSV with full permissions
        df.to_csv(output_csv_path, index=False)
        os.chmod(output_csv_path, 0o777)

        sheet = wb["Build Analysis"]
        summary_sheet = wb["Summary"]

        # Write Build Name, Date, and Total Time
        sheet["A3"] = build_name
        sheet["B3"] = report_date
        sheet["E3"] = total_time

        # Convert Username to Title Case
        username = os.getlogin().replace('.', ' ')
        sheet["D3"] = username.title()

        # Also copy Build Name to Summary sheet (B1)
        summary_sheet["B1"] = build_name

        # Find first empty row in column F (starting from F3)
        start_row = 3
        while sheet[f"F{start_row}"].value:
            start_row += 1

        # Track counts for Functional & Security Jira
        functional_count = 0
        security_count = 0

        # Write values into respective columns
        for i, (jira_id, jira_type, manual_testing, security_comment, why_manual_testing) in enumerate(
                zip(df["Jira ID"], df["Jira Type"], df["Manual Testing"], df["Security Comment"],
                    df["Why manual testing is not required?"]), start=start_row):

            sheet[f"F{i}"] = jira_id
            sheet[f"G{i}"] = jira_type
            sheet[f"I{i}"] = manual_testing
            sheet[f"J{i}"] = security_comment
            sheet[f"K{i}"] = why_manual_testing

            if jira_type == "Functional Jira":
                functional_count += 1
            elif jira_type == "Security Jira":
                security_count += 1

        # Count non-empty cells in column F starting from F3
        total_filled = sum(1 for row in range(3, sheet.max_row + 1) if sheet[f"F{row}"].value)
        sheet["C3"] = total_filled  

        # Write Functional Jira count (C3) and Security Jira count (C4) in Summary tab
        summary_sheet["C3"] = functional_count
        summary_sheet["C4"] = security_count

        # Close workbook before saving
        wb.close()

        # Save with full permissions
        wb.save(final_report_path)
        os.chmod(final_report_path, 0o777)

        status_label.config(text="Process Completed Successfully!", foreground="green")
        messagebox.showinfo("Success", f"Report saved as: {final_report_path}")

    except Exception as e:
        status_label.config(text="Error occurred!", foreground="red")
        messagebox.showerror("Error", str(e))

# Function to browse CSV file
def browse_csv():
    filename = filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv")])
    if filename:
        entry_csv.delete(0, "end")
        entry_csv.insert(0, filename)

# Tkinter GUI
root = Tk()
root.title("JIRA Report Processor")
root.geometry("550x350")
root.resizable(False, False)

menu_bar = Menu(root)
root.config(menu=menu_bar)
menu_bar.add_command(label="Configure Template", command=configure_template)

Label(root, text="APU-ID (Patch ID):").grid(row=0, column=0, padx=10, pady=5, sticky="w")
entry_patch_id = Entry(root, width=40)
entry_patch_id.grid(row=0, column=1, padx=10, pady=5)

Label(root, text="Build Name:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
entry_build_name = Entry(root, width=40)
entry_build_name.grid(row=1, column=1, padx=10, pady=5)

Label(root, text="Report Date:").grid(row=2, column=0, padx=10, pady=5, sticky="w")
date_picker = DateEntry(root, width=12, background="darkblue", foreground="white", date_pattern="yyyy-mm-dd")
date_picker.grid(row=2, column=1, padx=10, pady=5)

Button(root, text="Process Data", command=process_data).grid(row=3, column=1, pady=20)
status_label = Label(root, text="", font=("Arial", 10, "bold"))
status_label.grid(row=4, column=1, pady=5)

root.mainloop()