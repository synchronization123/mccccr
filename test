import os
import pandas as pd
from openpyxl import load_workbook
from tkinter import filedialog, messagebox, ttk, Tk, Label, Entry, Button

# Function to process data
def process_data():
    patch_id = entry_patch_id.get()
    file_path = entry_csv.get()
    final_report_path = entry_excel.get()

    if not patch_id or not file_path or not final_report_path:
        messagebox.showerror("Error", "Please fill in all fields!")
        return

    try:
        status_label.config(text="Processing...", foreground="blue")
        root.update_idletasks()

        # Read CSV
        data = pd.read_csv(file_path)
        dict_data = data.set_index('Issue key').to_dict('index')
        jira_id = list(dict_data.keys())

        security_comment, manual_testing, jira_type = [], [], []
        why_manual_testing_not_required = []
        securityJiraFilter = ['security', 'appsecurity', 'ram', 'dan', 'kan', 'van']

        for key in dict_data:
            flag_jira_type, flag_security_comment, flag_manual_testing = False, False, False
            for key1 in dict_data[key]:
                comment = str(dict_data[key][key1]).lower()

                if not flag_security_comment and patch_id in comment and 'security validation' in comment:
                    security_comment.append(comment.split('comments:')[1][:-3])
                    flag_security_comment = True

                    if 'manual testing:' in comment:
                        manualTesting = comment.split('manual testing:')[1][:6]
                        if not flag_manual_testing and 'done' in manualTesting:
                            manual_testing.append('Done')
                            flag_manual_testing = True

                if not flag_jira_type and ('Component' in str(key1) or 'QA-TeamLead' in str(key1)):
                    if comment.lower() in securityJiraFilter:
                        flag_jira_type = True
                        jira_type.append('Security Jira')

            if not flag_jira_type:
                jira_type.append('Functional Jira')
            if not flag_security_comment:
                security_comment.append('NA')
            if not flag_manual_testing:
                manual_testing.append('NA')

            if manual_testing[-1] == 'Done':
                why_manual_testing_not_required.append(' ')
            elif jira_type[-1] == 'Functional Jira':
                why_manual_testing_not_required.append(
                    'It is a functional jira. Code review is done to check for security vulnerabilities'
                )
            elif jira_type[-1] == 'Security Jira':
                why_manual_testing_not_required.append(
                    'This security issue was observed during Code Review. Code review was done to find the security issue'
                )
            else:
                why_manual_testing_not_required.append('NA')

        df = pd.DataFrame({
            'Jira ID': jira_id,
            'Security Comment': security_comment,
            'Jira Type': jira_type,
            'Manual Testing': manual_testing,
            'Why manual testing is not required?': why_manual_testing_not_required
        })

        df.to_csv('output.csv', index=False)

        # Load FinalReport workbook
        wb = load_workbook(final_report_path)
        sheet = wb["Build Analysis"]
        sheet["C3"] = len(jira_id)
        sheet["D3"] = os.getlogin().replace('.', ' ')

        wb.save(final_report_path)

        status_label.config(text="Process Completed Successfully!", foreground="green")
        messagebox.showinfo("Success", "Data successfully updated in FinalReport.xlsx.")

    except Exception as e:
        status_label.config(text="Error occurred!", foreground="red")
        messagebox.showerror("Error", str(e))

# Function to browse CSV file
def browse_csv():
    filename = filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv")])
    if filename:
        entry_csv.delete(0, "end")
        entry_csv.insert(0, filename)

# Function to browse Excel file
def browse_excel():
    filename = filedialog.askopenfilename(filetypes=[("Excel Files", "*.xlsx")])
    if filename:
        entry_excel.delete(0, "end")
        entry_excel.insert(0, filename)

# Tkinter GUI
root = Tk()
root.title("JIRA Report Processor")
root.geometry("500x300")
root.resizable(False, False)

# Styling
style = ttk.Style()
style.configure("TButton", font=("Arial", 10), padding=5)
style.configure("TLabel", font=("Arial", 10))

# Layout using Grid for proper alignment
Label(root, text="Enter APU-ID (Patch ID):").grid(row=0, column=0, padx=10, pady=5, sticky="w")
entry_patch_id = Entry(root, width=40)
entry_patch_id.grid(row=0, column=1, padx=10, pady=5, columnspan=2)

Label(root, text="Select CSV Dump File:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
entry_csv = Entry(root, width=30)
entry_csv.grid(row=1, column=1, padx=10, pady=5)
Button(root, text="Browse", command=browse_csv).grid(row=1, column=2, padx=10, pady=5)

Label(root, text="Select FinalReport Excel File:").grid(row=2, column=0, padx=10, pady=5, sticky="w")
entry_excel = Entry(root, width=30)
entry_excel.grid(row=2, column=1, padx=10, pady=5)
Button(root, text="Browse", command=browse_excel).grid(row=2, column=2, padx=10, pady=5)

Button(root, text="Process Data", command=process_data).grid(row=3, column=1, pady=20)

status_label = Label(root, text="", font=("Arial", 10, "bold"))
status_label.grid(row=4, column=1, pady=5)

root.mainloop()