import requests
import pandas as pd

# API details
API_URL = "https://dependencytrackapi.crm.com/api/v1/project"
API_TOKEN = "bzbdbdhdhd"
HEADERS = {
    "X-Api-Key": API_TOKEN,
    "Content-Type": "application/json",
    "Accept": "application/json"
}

def fetch_all_dependency_data():
    """Fetch all pages of Dependency Track API data."""
    all_data = []
    page = 1
    limit = 100  # Number of records per request

    while True:
        params = {"page": page, "limit": limit}  # Pagination parameters
        try:
            response = requests.get(API_URL, headers=HEADERS, params=params)
            response.raise_for_status()
            data = response.json()

            if not data:
                break  # Stop if no more records
            
            all_data.extend(data)  # Append current batch to full list

            print(f"Fetched {len(data)} records from page {page}")

            # Stop if fewer than 'limit' records are returned (last page)
            if len(data) < limit:
                break

            page += 1  # Move to next page
        except requests.exceptions.RequestException as e:
            print(f"Error fetching data: {e}")
            break

    return all_data

def process_data(data):
    """Filter and clean data to keep only relevant columns."""
    if not data:
        print("No data to process.")
        return None

    df = pd.json_normalize(data)  # Flatten JSON if needed

    # Keep only 'name', 'version', 'uuid' columns
    required_columns = ["name", "version", "uuid"]
    df = df[required_columns]

    # Filter rows where 'version' is 'develop'
    df = df[df["version"] == "develop"]

    return df

def save_to_excel(df, filename="dependency_track.xlsx"):
    """Save processed data to an Excel file."""
    if df is None or df.empty:
        print("No data to save after filtering.")
        return
    
    df.to_excel(filename, index=False)
    print(f"Filtered data successfully saved to {filename}")

if __name__ == "__main__":
    raw_data = fetch_all_dependency_data()
    filtered_df = process_data(raw_data)
    save_to_excel(filtered_df)