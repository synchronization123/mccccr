import os
import pandas as pd
import shutil
from datetime import datetime

# Step 1: Define Paths
current_date_str = datetime.now().strftime("%d-%b-%Y")  # Format: 27-Jan-2025
output_dir = f"data/output/{current_date_str}"
backup_dir = f"backup/{current_date_str}"

# Ensure directories exist
os.makedirs(output_dir, exist_ok=True)
os.makedirs(backup_dir, exist_ok=True)

# Step 2: Merge all `.xlsx` files in the current directory
all_files = [f for f in os.listdir() if f.endswith(".xlsx")]
df_list = [pd.read_excel(f) for f in all_files]
merged_df = pd.concat(df_list, ignore_index=True)

# Step 3: Ensure required columns exist
required_columns = [
    "Date", "Issue Key", "Issue Type", "Version", "Assigned To",
    "Status", "Assigned On", "Analyst Comments", "Mentor Review", "Feedback", "Security"
]
merged_df = merged_df.reindex(columns=required_columns, fill_value="")

# Step 4: Concatenate Issue Type and Security Columns
merged_df["Issue Type"] = merged_df["Issue Type"].astype(str) + " " + merged_df["Security"].astype(str)
merged_df["Issue Type"] = merged_df["Issue Type"].str.replace(" nan", "").str.replace(" None", "")  # Clean up unwanted strings

# Drop the Security column after concatenation
concatenated_df = merged_df.drop(columns=["Security"], errors="ignore")

# Save Concatenated Data
concatenated_file = f"{output_dir}/Concatenate.xlsx"
concatenated_df.to_excel(concatenated_file, index=False)

# Step 5: Standardize Issue Type Naming
issue_type_mapping = {
    "Bug": "Functional Bug",
    "Story": "Epic Story",
    "Bug Security": "Security",
    "Improvement-Technical Security": "Security"
}
concatenated_df["Issue Type"] = concatenated_df["Issue Type"].replace(issue_type_mapping)

# Step 6: Display Issue Type Summary and Get User Inputs
issue_type_counts = concatenated_df["Issue Type"].value_counts()
print("\nðŸ“Œ Issue Type Summary:")
print(issue_type_counts.to_string())

user_assignments = {}
for issue_type, count in issue_type_counts.items():
    suggested_users = max(1, count // 30)
    user_input = input(f"\nEnter {suggested_users} comma-separated users for '{issue_type}': ").strip()
    user_list = [u.strip() for u in user_input.split(",") if u.strip()]
    if not user_list:
        continue

    user_assignments[issue_type] = user_list

    # Assign sequentially (first user gets first 30, then next user, and so on)
    user_assignments_list = []
    for idx, issue in enumerate(concatenated_df[concatenated_df["Issue Type"] == issue_type].index):
        assigned_user = user_list[idx // 30 % len(user_list)]  # Sequential distribution
        user_assignments_list.append(assigned_user)

    concatenated_df.loc[concatenated_df["Issue Type"] == issue_type, "Assigned To"] = user_assignments_list

# Step 7: Add Current Date to Date and Assigned On Columns
concatenated_df["Date"] = current_date_str
concatenated_df["Assigned On"] = current_date_str

# Step 8: Split into Develop and Non-Develop Sheets
develop_mask = concatenated_df["Version"].str.contains("develop", case=False, na=False)
develop_df = concatenated_df[develop_mask]
non_develop_df = concatenated_df[~develop_mask & concatenated_df["Version"].notna()]  # Exclude blank Versions

# Step 9: Save Output Files
develop_file = f"{output_dir}/Develop_jiras_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
non_develop_file = f"{output_dir}/Non_Develop_jiras_{datetime.now().strftime('%Y-%m-%d')}.xlsx"

develop_df.to_excel(develop_file, index=False)
non_develop_df.to_excel(non_develop_file, index=False)

# Step 10: Display Summary by Version and Assigned To
version_summary = concatenated_df.groupby("Version")["Issue Key"].count().reset_index()
version_summary.columns = ["Version", "Total Issues"]

assigned_summary = concatenated_df.groupby("Assigned To")["Issue Key"].count().reset_index()
assigned_summary.columns = ["Assigned To", "Total Issues"]

print("\nðŸ“Œ Version-wise Summary:")
print(version_summary.to_string(index=False))

print("\nðŸ“Œ Assigned To Summary:")
print(assigned_summary.to_string(index=False))

# Calculate Overall Totals
total_issue_type_count = issue_type_counts.sum()
total_version_count = version_summary["Total Issues"].sum()

print(f"\nðŸ“Œ Total Issue Type Count: {total_issue_type_count}")
print(f"ðŸ“Œ Total Version-wise Issue Key Count: {total_version_count}")

# Step 11: Move Old Files to Backup and Delete
for f in all_files:
    if f not in [develop_file, non_develop_file, concatenated_file]:  # Preserve output files
        backup_path = os.path.join(backup_dir, f)
        if os.path.exists(backup_path):  # If already exists, rename with timestamp
            new_name = f"{os.path.splitext(f)[0]}_{datetime.now().strftime('%H%M%S')}.xlsx"
            backup_path = os.path.join(backup_dir, new_name)
        shutil.move(f, backup_path)

print("\nâœ… Process Completed Successfully!")